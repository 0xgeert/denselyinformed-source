module.exports = function(grunt) {

  //require('time-grunt')(grunt);

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    uglify: {
      options: {
        banner: '/* Clearskyabove - siteswide generated javascript. Version : <%= pkg.version %> */'
      },
      "jsfiles_static_zepto-pack": {
        "src": grunt.option('scriptToPack_zepto') ? JSON.parse(grunt.option('scriptToPack_zepto')) : [],
        "dest": "out/scripts/zepto-pack.min.js"
      },
      "jsfiles_static_jquery-pack": {
        "src": grunt.option('scriptToPack_jquery') ? JSON.parse(grunt.option('scriptToPack_jquery')) : [],
        "dest": "out/scripts/jquery-pack.min.js"
      }
    },
    copy:{
      //jsfiles_dev used in 'env=development'-mode. Copies javascript over verbatim
      "jsfiles_dev": {
        files:[
          {
            expand: true,
            flatten: true,
            src: grunt.option('scriptToPack_zepto') ? JSON.parse(grunt.option('scriptToPack_zepto')) : [],
            dest: 'out/scripts/',
            filter: 'isFile'
          }
        ]
      }
    },
    cssmin: {
      //used in 'env=static'-mode. Combines css-files in 'out' folder and minifies them. These source css-file
      //have just been generated by docpad. 
      minify: {
        options: {
          banner: '/* Clearskyabove - siteswide generated css. Version : <%= pkg.version %>*/'
        },
        files: (function(){

          var obj = {},
            prefixDir = "out";
            arr = grunt.option('stylesToPack') ? JSON.parse(grunt.option('stylesToPack')) : [];

          arr.forEach(function(val, i){
            arr[i]=  prefixDir + arr[i];
          });
          obj[prefixDir + grunt.option('stylesPacked')] =  arr;
          return obj;
        }())
      }
    }
  });

  // Load the plugin that provides the "uglify" task.
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-contrib-cssmin');

  grunt.registerTask("build", "build depending on environment", function(env){
      if(env === "static"){
        grunt.task.run([
          'uglify:jsfiles_static_zepto-pack',
          'uglify:jsfiles_static_jquery-pack',
          'cssmin:minify'
        ]);
      }else if(env === "development"){
        grunt.task.run(['copy:jsfiles_dev']);
      }else{
         grunt.warn("env must be defined with 'development' or 'static' i.e: 'build:development' or 'build:static'");
      }
  });

};